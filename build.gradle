plugins {
    id 'application'
    id 'java'
    id 'com.bmuschko.izpack' version '3.2'
    id 'edu.sc.seis.launch4j' version '3.0.5'
    id 'de.undercouch.download' version "5.1.0"
}

group = 'org.raw'
version = '1.0-SNAPSHOT'

apply from: "${project.rootDir}/gradle/launch4j.gradle"
apply from: "${project.rootDir}/gradle/izpack.gradle"
apply from: "${project.rootDir}/gradle/jdk.gradle"

repositories {
    mavenCentral()
}

dependencies {
    izpack 'org.codehaus.izpack:izpack-ant:5.2.1'
}

// Copies everything to the parent build folder so we can get IzPack to create its installer.  At the end, there will
// be an executable uber jar representing the installer.
// At the end of this task it will take this jar and create an EXE out of it.
tasks.register('makeInstaller', Copy) {
    dependsOn copyJDK
    dependsOn copyIzpackResources
    dependsOn copyProcessJar
    dependsOn copyUninstallJar
    dependsOn copyProductZip
    dependsOn replaceTokens
    dependsOn izPackCreateInstaller

    tasks.jar.mustRunAfter copyProcessJar
    tasks.jar.mustRunAfter copyUninstallJar
    tasks.copyIzpackResources.mustRunAfter copyProductZip
    tasks.izPackCreateInstaller.mustRunAfter replaceTokens
    tasks.izPackCreateInstaller.mustRunAfter copyIzpackResources
    tasks.izPackCreateInstaller.mustRunAfter distZip
    tasks.izPackCreateInstaller.mustRunAfter copyProductZip
    tasks.izPackCreateInstaller.mustRunAfter copyJDK
    tasks.izPackCreateInstaller.mustRunAfter copyProcessJar
    tasks.izPackCreateInstaller.mustRunAfter copyUninstallJar

    finalizedBy(createExe)
}

// Packages the entire distribution into a single zip file.  This will contain the installer and the JDK at the root
// level.  The installer will do whatever it has been programmed to do.
tasks.register('packageDistribution', Zip) {
    from fileTree(layout.buildDirectory.dir('runtime'))
    from file(layout.buildDirectory.dir('launch4j'))
    archiveBaseName = 'izpack'
    destinationDirectory = layout.buildDirectory.dir('distributions')
}