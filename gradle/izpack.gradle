// Tasks needed to build the installer
import org.apache.tools.ant.filters.ReplaceTokens

// Copy izpack resources
tasks.register('copyIzpackResources', Copy) {
    from layout.projectDirectory.dir('izpack/resources')
    into layout.buildDirectory.dir('assemble/izpack')
}

// Copy the product zip which contains all required jar files to run the product
// These will be next to the installer and unzipped during installation
tasks.register('copyProductZip', Copy) {
    from { project(':product').layout.buildDirectory.file("distributions/product-${version}.zip")}
    into layout.buildDirectory.dir('assemble/izpack')
    rename "product-${version}.zip", "product.zip"
}

// Copy the process jar.  This contains custom java code the installer will use for the ProcessPanel, or any other
// use case in the installer as defined by the installer.xml
tasks.register('copyProcessJar', Copy) {
    // copy the process jar created in the installer module into the main parent build folder for further processing
    from { project(':installer').layout.buildDirectory.file("libs/installer-${version}-all.jar") }
    into layout.buildDirectory.dir('assemble/izpack')
    rename "installer-${version}-all.jar", 'installer-all.jar'
}

// Copy the uninstall jar.  This contains custom java code the uninstaller will call during that process.
// It should be as limited as possible due to how long it takes to write out the uninstaller.jar
tasks.register('copyUninstallJar', Copy) {
    from { project(':uninstaller').layout.buildDirectory.file("libs/uninstaller-${version}-all.jar")}
    into layout.buildDirectory.dir('assemble/izpack')
    rename "uninstaller-${version}-all.jar", 'uninstaller-all.jar'
}

// Copy the jdk that will be bundled with the EXE
tasks.register('copyJDK', Copy) {
    from { project(':installer').layout.buildDirectory.dir('jdk') }
    into layout.buildDirectory.dir('runtime/jdk')
}

// Will replace any tokens in the installer.xml for izpack
tasks.register('replaceTokens', Copy) {
    from layout.projectDirectory.file('izpack/installer.xml')
    into layout.buildDirectory.dir('izpack')
    filter(ReplaceTokens, tokens: [BUILD_FOLDER: layout.buildDirectory.get().toString(), VERSION: version])
}

// Configure IzPack
izpack {
    baseDir = layout.buildDirectory.dir('assemble/izpack').get().asFile
    installFile = layout.buildDirectory.file('izpack/installer.xml').get().asFile
    outputFile = layout.buildDirectory.file("distributions/izpack-demo-${version}-installer.jar").get().asFile
    compression = 'deflate'
    compressionLevel = 9
    appProperties = ['app.group': 'org.raw', 'app.name': 'izpack-demo', 'app.title': 'izPack Demo',
                     'app.version': version, 'app.subpath': "izpack-demo-$version"]
}
